defmodule SelectoNorthwind.SavedViewContext do
  @moduledoc """
  Context module implementing SelectoComponents.SavedViews behavior.

  This module provides a `use` macro that adds saved views functionality
  to your domain modules.

  Generated by mix selecto.gen.saved_views

  ## Usage

      defmodule MyApp.Domains.UserDomain do
        use SelectoNorthwind.SavedViewContext
        
        # ... rest of domain configuration
      end
  """

  defmacro __using__(_opts \\ []) do
    quote do
      @behaviour SelectoComponents.SavedViews

      import Ecto.Query

      def get_view(name, context) do
        q =
          from v in SelectoNorthwind.SavedView,
            where: ^context == v.context,
            where: ^name == v.name

        SelectoNorthwind.Repo.one(q)
      end

      def save_view(name, context, params) do
        case get_view(name, context) do
          nil ->
            SelectoNorthwind.Repo.insert!(%SelectoNorthwind.SavedView{
              name: name,
              context: context,
              params: params
            })

          view ->
            update_view(view, params)
        end
      end

      defp update_view(view, params) do
        {:ok, view} =
          SelectoNorthwind.SavedView.changeset(view, %{params: params})
          |> SelectoNorthwind.Repo.update()

        view
      end

      def get_view_names(context) do
        q =
          from v in SelectoNorthwind.SavedView,
            select: v.name,
            where: ^context == v.context,
            order_by: v.name

        SelectoNorthwind.Repo.all(q)
      end

      def decode_view(view) do
        # Return params to use for view restoration
        view.params
      end
    end
  end
end
